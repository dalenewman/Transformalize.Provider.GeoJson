<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Transformalize.Provider.GeoJson</name>
    </assembly>
    <members>
        <member name="T:Transformalize.Providers.GeoJson.GeoJsonFileWriter">
            <summary>
            Writes GeoJson out to file
            </summary>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonFileWriter.#ctor(Transformalize.Context.OutputContext)">
            <summary>
            Given an output context, prepare to write a GeoJson file.
            </summary>
            <param name="context">a transformalize output context</param>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonFileWriter.Write(System.Collections.Generic.IEnumerable{Transformalize.Contracts.IRow})">
            <summary>
            Given rows, write them to a GeoJson file.
            </summary>
            <param name="rows">transformalize rows</param>
        </member>
        <member name="T:Transformalize.Providers.GeoJson.GeoJsonMinimalEntityStreamWriter">
            <summary>
            Write an entity's output as GeoJson to a stream with an emphasis on a light payload
            </summary>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonMinimalEntityStreamWriter.#ctor(Transformalize.Contracts.IContext,System.IO.Stream)">
            <summary>
            Given a context, and a stream, prepare to write GeoJson
            </summary>
            <param name="context">a transformalize context</param>
            <param name="stream">a stream to write to</param>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonMinimalEntityStreamWriter.Write(System.Collections.Generic.IEnumerable{Transformalize.Contracts.IRow})">
            <summary>
            Write rows to GeoJson stream
            </summary>
            <param name="rows">transformalize rows</param>
        </member>
        <member name="T:Transformalize.Providers.GeoJson.GeoJsonMinimalProcessStreamWriter">
            <summary>
            Write a process' output as GeoJson to a stream with an emphasis on a light payload
            </summary>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonMinimalProcessStreamWriter.#ctor(Transformalize.Contracts.IContext,Newtonsoft.Json.JsonWriter)">
            <summary>
            Given a context and a JSON Writer, prepare to write
            </summary>
            <param name="context"></param>
            <param name="jsonWriter"></param>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonMinimalProcessStreamWriter.Write(System.Collections.Generic.IEnumerable{Transformalize.Contracts.IRow})">
            <summary>
            Write transformalize rows as GeoJson to a stream
            </summary>
            <param name="rows">transformalize rows</param>
        </member>
        <member name="T:Transformalize.Providers.GeoJson.GeoJsonStreamWriter">
            <summary>
            It writes data as GeoJson to a stream, converting non-geojson stuff to html in the description
            </summary>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonStreamWriter.#ctor(Transformalize.Contracts.IContext,System.IO.Stream)">
            <summary>
            Prepare to write GeoJson to a stream
            </summary>
            <param name="context">a transformalize context</param>
            <param name="stream">whatever stream you want to write to</param>
        </member>
        <member name="M:Transformalize.Providers.GeoJson.GeoJsonStreamWriter.Write(System.Collections.Generic.IEnumerable{Transformalize.Contracts.IRow})">
            <summary>
            Write rows to as GeoJson to a stream
            </summary>
            <param name="rows"></param>
        </member>
    </members>
</doc>
